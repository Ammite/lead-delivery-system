from datetime import datetime
import json
import re
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, List, Optional
import uvicorn
import uuid
import logging
import config
from email.mime.text import MIMEText
import smtplib
import requests  # –¥–ª—è Telegram
import aiohttp
import asyncio
import aiosmtplib

app = FastAPI(title="Lead Delivery System", description="–°–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏–¥–æ–≤", version="1.0.0")


logging.basicConfig(
    level=logging.DEBUG,  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format="%(asctime)s [%(levelname)s] %(message)s",  # —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–∞
    handlers=[
        logging.StreamHandler()  # –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
log = logging.getLogger("LDS")
log.setLevel(logging.DEBUG)

class Lead(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None
    text: Optional[str] = None
    source: str = None
    campaign: Optional[str] = None
    is_telegram: bool = False
    is_mail: bool = False
    is_form: bool = True
    api_key: str = None

@app.post("/leads")
async def create_lead(lead_data: Dict[str, Any]):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –¥–∞–Ω–Ω—ã–º–∏ –ª–∏–¥–∞ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä—å
    """
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ id –∫ –ª–∏–¥—É
    lead_data['id'] = str(uuid.uuid4())
    lead_id = lead_data.get("id", "|No uuid|")
    
    log.debug(f"Lead #{lead_id}. Got. Data: \n{json.dumps(lead_data, indent=4)}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    log.debug(f"Lead #{lead_id}. Process Data. Start")
    processed_lead = process_lead_data(lead_data)
    log.debug(f"Lead #{lead_id}. Process Data. End")
    if processed_lead is None:
        log.info(f"Lead #{lead_id} handling ended")
        return {
            "status": "error",
            "message": "Lead received and processed, but wasnt sent. Check logs for further information.",
            "lead_id": lead_data.get("id"),
            "data": processed_lead
        }
    
    log.debug(f"Lead #{lead_id}. Sending Data. Start.")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    tasks = []
    
    if processed_lead.get("is_telegram", False):
        log.debug(f"Lead #{lead_id}. Sending Data. Start. Telegram.")
        if lead_data.get("is_form", True):
            log.debug(f"Lead #{lead_id}. Sending Data. Start. Telegram. Form.")
            tasks.append(send_form_to_telegram(lead_data))
        else:
            log.debug(f"Lead #{lead_id}. Sending Data. Start. Telegram. Chat.")
            tasks.append(send_lead_to_telegram(lead_data))

    if processed_lead.get("is_mail", False):
        log.debug(f"Lead #{lead_id}. Sending Data. Start. Email.")
        if lead_data.get("is_form", True):
            log.debug(f"Lead #{lead_id}. Sending Data. Start. Email. Form.")
            tasks.append(send_form_to_mail(lead_data))
        else:
            log.debug(f"Lead #{lead_id}. Sending Data. Start. Email. Chat.")
            tasks.append(send_lead_to_mail(lead_data))
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    if tasks:
        try:
            await asyncio.gather(*tasks, return_exceptions=True)
            log.debug(f"Lead #{lead_id}. All sending tasks completed")
        except Exception as e:
            log.error(f"Lead #{lead_id}. Error in parallel sending: {e}")

    log.debug(f"Lead #{lead_id}. Sending Data. End.")
    
    log.info(f"Lead #{lead_id} handling ended")
    return {
        "status": "success",
        "message": "Lead received and processed",
        "lead_id": lead_data.get("id"),
        "data": processed_lead
    }

async def send_lead_to_telegram(lead_data: Dict[str, Any]):
    lead_id = lead_data.get("id", "")
    lead_source = lead_data.get("source", "")
    lead_text = lead_data.get("text", "")
    tg_message = (
        f"üîî <b>–ù–æ–≤—ã–π –ª–∏–¥</b>\n\n"
        f"üåê <b>–ß–∞—Ç:</b> {lead_source}\n"
        f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"üÜî <b>ID:</b> {lead_id}\n"
        f"{lead_text}"
    )
    try:
        token = config.TELEGRAM_BOT_TOKEN
        chat_ids_w_source = config.source_data.get(lead_source, {}).get("telegram_ids", [])
        chat_ids = chat_ids_w_source + config.default_telegram_ids
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        log.debug(f"Lead #{lead_id}. Sending to chats: {str(chat_ids)}")
        
        async with aiohttp.ClientSession() as session:
            tasks = []
            for chat_id in chat_ids:
                payload = {"chat_id": chat_id, "text": tg_message, "parse_mode": "HTML"}
                task = session.post(url, data=payload, timeout=aiohttp.ClientTimeout(total=10))
                tasks.append(task)
            
            if tasks:
                responses = await asyncio.gather(*tasks, return_exceptions=True)
                return responses
            return []
            
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        return None

async def send_form_to_telegram(lead_data: Dict[str, Any]):
    lead_name = lead_data.get("name", "")
    lead_phone = lead_data.get("phone", "")
    lead_email = lead_data.get("email", "")
    lead_id = lead_data.get("id", "")
    lead_source = lead_data.get("source", "")
    lead_campaign = lead_data.get("campaign", "")
    lead_text = lead_data.get("text", "")
    tg_message = (
        f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"üåê <b>–°–∞–π—Ç:</b> {lead_source}\n"
        f"üìù <b>–§–æ—Ä–º–∞:</b> {lead_campaign}\n"
        f"üë§ <b>–ò–º—è:</b> {lead_name}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {lead_phone}\n"
        f"üìß <b>Email:</b> {lead_email}\n"
        f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"üÜî <b>ID:</b> {lead_id}\n"
        f"{lead_text}"
    )
    try:
        token = config.TELEGRAM_BOT_TOKEN
        chat_ids_w_source = config.source_data.get(lead_source, {}).get("telegram_ids", [])
        chat_ids = chat_ids_w_source + config.default_telegram_ids
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        
        log.debug(f"Lead #{lead_id}. Sending to chats: {str(chat_ids)}")
        
        async with aiohttp.ClientSession() as session:
            tasks = []
            for chat_id in chat_ids:
                payload = {"chat_id": chat_id, "text": tg_message, "parse_mode": "HTML"}
                task = session.post(url, data=payload, timeout=aiohttp.ClientTimeout(total=10))
                tasks.append(task)
            
            if tasks:
                responses = await asyncio.gather(*tasks, return_exceptions=True)
                return responses
            return []
            
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ Telegram: {e}")
        return None
    
async def send_lead_to_mail(lead_data: Dict[str, Any]) -> bool:
    lead_id = lead_data.get("id", "")
    lead_source = lead_data.get("source", "")
    lead_text = lead_data.get("text", "")
    subject = f"–ù–æ–≤—ã–π –ª–∏–¥ —Å —á–∞—Ç–∞ {lead_source}"
    body = (
        f"–ß–∞—Ç: {lead_source}\n"
        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"ID –∑–∞—è–≤–∫–∏: {lead_id}\n"
        f"{lead_text}"
    )
    try:
        receivers = config.source_data.get(lead_source, {}).get("emails", [])
        receivers.extend(config.default_emails)
        
        if not receivers:
            return True
            
        log.debug(f"Lead #{lead_id}. Sending to emails: {str(receivers)}")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –ø–∏—Å–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for to in receivers:
            task = send_single_email(to, subject, body, config.SMTP_from)
            tasks.append(task)
        
        if tasks:
            results = await asyncio.gather(*tasks, return_exceptions=True)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
            success_count = sum(1 for result in results if result is True)
            log.debug(f"Lead #{lead_id}. Email sent successfully to {success_count}/{len(tasks)} recipients")
            return success_count > 0
        
        return True
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ SMTP: {e}")
        return False

async def send_single_email(to: str, subject: str, body: str, from_email: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ email –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
    try:
        msg = MIMEText(body, "plain", "utf-8")
        msg["Subject"] = subject
        msg["From"] = from_email
        msg["To"] = to
        
        await aiosmtplib.send(
            msg,
            hostname=config.SMTP_host,
            port=config.SMTP_port,
            username=config.SMPT_login,
            password=config.SMPT_pass,
            use_tls=True,  # –î–ª—è –ø–æ—Ä—Ç–∞ 465 –∏—Å–ø–æ–ª—å–∑—É–µ–º SSL/TLS
            timeout=30     # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        )
        return True
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞ {to}: {e}")
        return False

async def send_form_to_mail(lead_data: Dict[str, Any]):
    lead_name = lead_data.get("name", "")
    lead_phone = lead_data.get("phone", "")
    lead_email = lead_data.get("email", "")
    lead_id = lead_data.get("id", "")
    lead_source = lead_data.get("source", "")
    lead_campaign = lead_data.get("campaign", "")
    lead_text = lead_data.get("text", "")
    subject = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ {lead_source}"
    body = (
        f"–°–∞–π—Ç: {lead_source}\n"
        f"–§–æ—Ä–º–∞: {lead_campaign}\n"
        f"–ò–º—è: {lead_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {lead_phone}\n"
        f"Email: {lead_email}\n"
        f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
        f"ID –∑–∞—è–≤–∫–∏: {lead_id}\n"
        f"{lead_text}"
    )
    try:
        receivers = config.source_data.get(lead_source, {}).get("emails", [])
        receivers.extend(config.default_emails)
        
        if not receivers:
            return True
            
        log.debug(f"Lead #{lead_id}. Sending to emails: {str(receivers)}")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –ø–∏—Å–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = []
        for to in receivers:
            task = send_single_email(to, subject, body, config.SMTP_from)
            tasks.append(task)
        
        if tasks:
            results = await asyncio.gather(*tasks, return_exceptions=True)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
            success_count = sum(1 for result in results if result is True)
            log.debug(f"Lead #{lead_id}. Email sent successfully to {success_count}/{len(tasks)} recipients")
            return success_count > 0
        
        return True
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ SMTP: {e}")
        return False

def process_lead_data(lead_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
    """
    lead_id = lead_data.get("id", "|No uuid|")
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    log.debug(f"Lead #{lead_id}. Validate Data. Start")
    is_valid = validate_lead_data(lead_data)
    log.debug(f"Lead #{lead_id}. Validate Data. End")
    if not is_valid:
        return None
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    log.debug(f"Lead #{lead_id}. Filter Data. Start")
    is_spam = filter_lead_data(lead_data)
    log.debug(f"Lead #{lead_id}. Filter Data. End")
    if is_spam:
        return None
    return lead_data

def is_phone_valid(phone: str, lead_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
    - –ü—É—Å—Ç–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–ø—É—Å—Ç–∏–º (True)
    - –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    - –î–æ–ø—É—Å–∫–∞–µ–º:
        * 6 –∏–ª–∏ 7 —Ü–∏—Ñ—Ä (–≥–æ—Ä–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä)
        * 10 —Ü–∏—Ñ—Ä, –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 9 (–º–æ–±–∏–ª—å–Ω—ã–π –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã)
        * 11 —Ü–∏—Ñ—Ä, –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏–ª–∏ 8
        * 12 —Ü–∏—Ñ—Ä, –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 (–∞–Ω–∞–ª–æ–≥ "+7", —Ç–æ–ª—å–∫–æ –±–µ–∑ –ø–ª—é—Å–∞)
    """
    if not phone:
        return True  # –ø—É—Å—Ç–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –¥–æ–ø—É—Å—Ç–∏–º

    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    clean_phone = re.sub(r"[^0-9]", "", phone)

    if not clean_phone.isdigit():
        log.info(f"Lead #{lead_id} is not valid. Reason: phone number contains not digits")
        return False

    length = len(clean_phone)

    if length == 6:  # –≥–æ—Ä–æ–¥—Å–∫–æ–π –∫–æ—Ä–æ—Ç–∫–∏–π
        return True

    if length == 7:  # –≥–æ—Ä–æ–¥—Å–∫–æ–π
        return True

    if length == 10 and clean_phone.startswith("9"):  # –º–æ–±–∏–ª—å–Ω—ã–π –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
        return True

    if length == 11 and clean_phone[0] in ("7", "8"):  # –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä
        return True

    if length == 12 and clean_phone.startswith("7"):  # "+7" –±–µ–∑ –ø–ª—é—Å–∞
        return True

    log.info(f"Lead #{lead_id} is not valid. Reason: didnt pass Russian phone numbers checks")
    return False

def is_email_valid(email: str, lead_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ email –ø–æ –ª–æ–≥–∏–∫–µ:
    - –ü—É—Å—Ç–æ–π email –¥–æ–ø—É—Å—Ç–∏–º (True)
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
    - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö/–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤
    """

    if not email:
        return True  # –ø—É—Å—Ç–æ–π email –¥–æ–ø—É—Å—Ç–∏–º

    # –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    pattern = r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"
    if not re.match(pattern, email):
        log.info(f"Lead #{lead_id} is not valid. Reason: email re.match error")
        return False

    # –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    suspicious_domains = [
        "tempmail.", "temp-mail.", "10minutemail.", "guerrillamail.",
        "mailinator.", "throwaway.", "spambox.", "trashmail."
    ]

    email_lower = email.lower()
    for domain in suspicious_domains:
        if domain in email_lower:
            log.info(f"Lead #{lead_id} is not valid. Reason: email is temporary ({domain})")
            return False

    # Email is valid
    return True

def validate_lead_data(lead_data: Dict[str, Any]) -> bool:
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞
    """
    lead_id = lead_data.get("id", "|No uuid|")
    lead_source = lead_data.get("source", None)
    lead_api_key = lead_data.get("api_key", None)
    lead_phone = lead_data.get("phone", "")
    lead_email = lead_data.get("email", "")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è source
    if not lead_source:
        log.info(f"Lead #{lead_id} rejected. Reason: missing source")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è api_key
    if not lead_api_key:
        log.info(f"Lead #{lead_id} rejected. Reason: missing api_key")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ source –µ—Å—Ç—å –≤ source_data
    if lead_source not in config.source_data:
        log.info(f"Lead #{lead_id} rejected. Reason: source '{lead_source}' not in source_data")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    expected_api_key = config.source_data.get(lead_source, {}).get("api_key", "")
    if expected_api_key != lead_api_key:
        log.info(f"Lead #{lead_id} rejected. Reason: invalid api_key for source '{lead_source}'")
        return False
    
    is_email_valid_check = is_email_valid(lead_email, lead_id)
    if not is_email_valid_check:
        return False

    is_phone_valid_check = is_phone_valid(lead_phone, lead_id)
    if not is_phone_valid_check:
        return False

    return True

def filter_lead_data(lead_data: Dict[str, Any]) -> bool:
    """
    –§–∏–ª—å—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞ 
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Å–ø–∞–º
    """
    lead_id = lead_data.get("id", "|No uuid|")
    lead_text = lead_data.get("text", "")
    lead_name = lead_data.get("name", "")
    text = lead_name + "\n" + lead_text

    text_lower = text.lower()
    for word in config.spam_words:
        if word.lower() in text_lower:
            log.info(f"Lead #{lead_id} is spam. Reason: contains banned word: {word}")
            return True
        
    # –ù–µ –Ω–∞—à–ª–∏ –ø—Ä–∏—á–∏–Ω, —á—Ç–æ —ç—Ç–æ —Å–ø–∞–º
    log.info(f"Lead #{lead_id} is NOT spam. Reason: did not found any spam flags")
    return False

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)



